rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidApiKey() {
      return isAuthenticated() && 
        request.auth.token.apiKey == true;
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        request.auth.token.role == role;
    }
    
    // Searches collection - user-owned searches
    match /searches/{searchId} {
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        hasRole('admin') ||
        isValidApiKey()
      );
      
      allow create: if isAuthenticated() && (
        isOwner(request.resource.data.userId) ||
        hasRole('admin') ||
        isValidApiKey()
      );
      
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        hasRole('admin') ||
        isValidApiKey()
      );
      
      allow delete: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        hasRole('admin')
      );
    }
    
    // Availabilities collection - read-only for users
    match /availabilities/{availabilityId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('admin') || isValidApiKey();
    }
    
    // Search results collection - read-only for users
    match /searchResults/{resultId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('admin') || isValidApiKey();
    }
    
    // API Keys collection - admin only
    match /apiKeys/{keyId} {
      allow read: if hasRole('admin');
      allow write: if hasRole('admin');
    }
    
    // User profiles collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (
        isOwner(userId) ||
        hasRole('admin')
      );
      
      allow update: if isAuthenticated() && (
        isOwner(userId) ||
        hasRole('admin')
      );
      
      allow create: if isAuthenticated() && isOwner(userId);
      allow delete: if hasRole('admin');
    }
    
    // System configuration - admin only
    match /config/{configId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('admin');
    }
  }
}